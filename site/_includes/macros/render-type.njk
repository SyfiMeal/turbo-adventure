
{#
  Top-level rendering of a model.Property.
#}
{% macro renderTopProperty(prop, prefix) %}

  {% set type = prop.type %}

<h3 id="{{ prefix }}-{{ prop.name }}">{{ prop.name }}</h3>

{# Render the function signature. #}
{% if type.key === 'function' %}
  {{ renderTypeSignature(prop) }}
{% elif type.key === 'ref' and type.name === 'events.Event' %}
  {% if type.templates[0].primitiveType === 'void' %}
    {# This is a declarative event listener as it has no listener function type. #}
    <p>
      Provides the <a href="/docs/extensions/reference/events/#declarative-event-handlers">Declarative Event API</a> consisting of <code>addRules</code>, <code>removeRules</code>, and <code>getRules</code>.
    </p>
  {% else %}
    {# This isn't really part of the type but we show users how to add a listener. #}
    <div class="code-sections__signature">
      <code>
        {{ prop.name }}.addListener(listener: <span class="code-sections__signature-type">function</span>)
      </code>
    </div>
  {% endif %}
{% endif %}

{{ renderComment(prop) }}
{{ renderTopType(type, prop) }}

{% endmacro %}


{#
  Top-level rendering of a model.Type. This is needed as we recurse for union types.
#}
{% macro renderTopType(type, prop) %}

  {% if not type %}
    {# This should probably never happen. #}

  {% elif prop.isType and type.key === 'choices' %}
    {# Type that contains many string (probably) options, basically an enum. #}
    {{ renderOptionalTypesArray(type.choices, 'Enum', prop) }}

  {% elif type.key === 'function' %}
    {# Top-level namespace function. #}

    {% if type.isReturnsAsync %}
      {{ renderOptionalParametersSection(type.parametersForAsync, 'Parameters') }}

      <dl class="code-sections__list">
        <h4>Result</h4>
        <dt>
          <div class="code-sections__label">return/callback</div>
          <div class="type--xsmall code-sections__icon code-sections__icon--function">async</span></div>
        </dt>
        <dd>
          {% set returnParameters = type.callbackForAsync.type.parameters %}
          {% set cf = prop.canonicalFeature %}
          <p>
            The <code>{{ prop.name }}</code> method provides its result via callback or returned as a <code>Promise</code>
            {% if not cf.minManifestVersion or cf.minManifestVersion < 3 %}
              (MV3 only)
            {% endif %}.
            {% if not returnParameters.length %}
              It has no parameters.
            {% endif %}
          </p>
          {{ renderOptionalParametersSection(returnParameters) }}
        </dd>
      </dl>

    {% else %}
      {{ renderOptionalParametersSection(type.parameters, 'Parameters') }}
      {% if type.returnProperty and type.returnType.primitiveType !== 'void' %}

        <dl class="code-sections__list">
          <h4>Returns</h4>
          {{ internalRenderParameter(type.returnProperty) }}
        </dl>

      {% endif %}
    {% endif %}

  {% elif type.key === 'ref' and type.name === 'events.Event' %}
    {# Top-level event variable. #}

    {% if type.templates[0].primitiveType === 'void' %}
      {{ renderOptionalTypesArray(type.templates[1].choices, 'Conditions', prop) }}
      {{ renderOptionalTypesArray(type.templates[2].choices, 'Actions', prop) }}
    {% else %}

      <dl class="code-sections__list">
        <h4>Event</h4>
        {{ internalRenderListenerAsItem(type.templates[0]) }}
      </dl>

    {% endif %}

  {% elif type.key === 'literal' %}
    {# Top-level literal number or string. #}

    <dl class="code-sections__list">
      <h4>Value</h4>
      <dt>{{ renderSingleType(type, prop) }}</dt>
    </dl>

  {% elif type.key === 'union' and not prop.isType %}
    {# Union of many things as a non-type. #}

    {% for type in type.types %}
      {{ renderTopType(type, prop) }}
    {% endfor %}

  {% elif type.key === 'object' %}
    {# Object with properties. #}

    {% if type.properties | length %}

      <dl class="code-sections__list">
        <h4>Properties</h4>
        {% for name, prop in type.properties | dictsort %}
          {{ internalRenderParameter(prop) }}
        {% endfor %}
      </dl>

    {% endif %}

  {% else %}
    {# Some other kind of type. #}

      <dl class="code-sections__list">
        <h4>Type</h4>
        <dt>{{ renderSingleType(type, prop) }}</dt>
      </dl>

  {% endif %}

{% endmacro %}

{#
  Renders an optional list of parameters.
#}
{% macro renderOptionalParametersSection(parameters, label) %}

  {% if parameters.length %}
    <dl class="code-sections__list">
      {% if label %}
        <h4>{{ label }}</h4>
      {% endif %}
      {% for parameter in parameters %}
        {{ internalRenderParameter(parameter) }}
      {% endfor %}
    </dl>
  {% endif %}

{% endmacro %}

{#
  Renders an optional list of types, e.g., for an enum.
#}
{% macro renderOptionalTypesArray(types, label, prop) %}

  {% if types.length %}
    <dl class="code-sections__list">
      {% if label %}
        <h4>{{ label }}</h4>
      {% endif %}
      <dd>
        {% for t in types %}
          {% if loop.last and not loop.first %}or{% endif %}
          {{ renderSingleType(t, prop) | trim }}{% if not loop.last %},{% endif %}
        {% endfor %}
      </dd>
    </dl>
  {% endif %}

{% endmacro %}

{#
  Renders a comment, its optional version information and deprecation notice.
#}
{% macro renderComment(prop) %}
  {% set warningText %}{{ renderAvailabilityFeature(prop.feature) }}{% endset %}
  {% if warningText | trim %}
    <p class="code-sections__deprecated">{{ warningText | trim | safe }}</p>
  {% endif %}
  {# This |md filter will add <p> as appropriate. #}
  {{ prop.description | md | safe }}
{% endmacro %}

{#
  Renders a <li> based on a callback/listener model.FunctionType. Used by events on top-level and
  as part of interfaces.
#}
{% macro internalRenderListenerAsItem(listenerType, name = 'listener') %}
  <dt>
    <div class="code-sections__label">{{ name }}</div>
    <div class="type--xsmall code-sections__icon code-sections__icon--function">function</span></div>
  </dt>
  <dd>
    <p>
      The {{ name }} parameter should be a function that looks like this:
    </p>
    <div class="code-sections__callback type--xsmall"><code>{{ renderFunctionParameters(listenerType.parameters) }} => {...}</code></div>

    {{ renderOptionalParametersSection(listenerType.parameters) }}
  </dd>
{% endmacro %}

{#
  Renders a <li> with the type's name and description. This is used for parts of a top-level type.
#}
{% macro internalRenderParameter(prop) %}
  {% set type = prop.type %}

<dt>
  <div class="code-sections__label">{{ prop.name }}</div>
  <div class="type--xsmall">{{ renderSingleType(prop.type, prop) }}</div>
</dt>
<dd>

{% set description %}
  {{ renderComment(prop) }}

  {% if type.key === 'function' and (prop.name === 'callback' or prop.name === 'listener') %}
    {# This is a callback or a listener. Tell the user how to specify it. #}
    <p>
      {% if prop.optional %}
        If you specify the {{ spec.name }} parameter, it
      {% else %}
        The {{ spec.name }} parameter
      {% endif %}
      should be a function that looks like this:
    </p>
    {% set functionPart %}
      {{ renderFunctionParameters(type.parameters) }} => {...}
    {% endset %}
  {% elif type.key === 'function' %}
    {# This is a function, often given to the user. It's ambiguous how it will
       be called, so just show its signature. #}
    <p>
      The {{ prop.name }} function looks like this:
    </p>
    {% set functionPart %}
      {{ prop.name }}{{ renderFunctionParameters(type.parameters) }} => {...}
    {% endset %}
  {% endif %}
{% endset %}

{% set description = description | trim %}
{% if description %}
  <div class="type stack code-sections__description">{{ description | safe }}</div>
{% endif %}

{% if functionPart %}
  <div class="code-sections__callback type--xsmall"><code>{{ functionPart | safe }}</code></div>
{% endif %}

{# OPTION: array #}
{% if type.key === 'sequence' %}
  {# Render further information about the contained type. #}
  {% set type = type.itemType %}
{% endif %}

{# OPTION: type (class) or object (property) #}
{% if type.key === 'object' %}
  {% if type.properties | length %}
    <dl class="code-sections__list">
      {% for name, prop in type.properties | dictsort %}
        {{ internalRenderParameter(prop) }}
      {% endfor %}
    </dl>
  {% endif %}

{# OPTION: function #}
{% elif type.key === 'function' %}
  {% if type.parameters.length or type.returnType.primitiveType !== 'void' %}
    <dl class="code-sections__list">
      {% for parameter in type.parameters %}
        {{ internalRenderParameter(parameter) }}
      {% endfor %}
      {% if type.returnType.primitiveType !== 'void' %}
        {{ internalRenderParameter(type.returnProperty) }}
      {% endif %}
    </dl>
  {% endif %}

{# OPTION: event #}
{% elif type.key === 'ref' and type.name === 'events.Event' %}
  <dl class="code-sections__list">
    {{ internalRenderListenerAsItem(type.templates[0]) }}
  </dl>

{% endif %}

</dd>
{% endmacro %}

{#
  Renders a single model.Type as a single word. Used for signatures and type hints.

  If outerProp is non-null, shows a hint icon, because it's the left-most type inside a table view.
#}
{% macro renderSingleType(type, outerProp) %}
  {% set iconType = type.key %}

  {% set stringType %}
    {% if not type %}
      {# Should never happen #}
      ?

    {% elif type.key === 'primitive' %}
      {# Primitive type, e.g. "number" or "void" #}
      {% set iconType = type.primitiveType %}
      {{ type.primitiveType }}

    {% elif type.key === 'literal' %}
      {# Literal value, e.g., 123 or '"foo"' #}
      {% set iconType = type.primitiveType %}
      <span class="code-sections__value">{{ type.value | dump }}</span>

    {% elif type.key === 'ref' %}
      {# Reference to another type (internal or external) #}

      {% set iconType = 'object' %}

      {% set link = type.name | modelToHref %}
      {% if link %}
        <a href="{{ link }}">{{ type.name }}</a>
      {%- else %}
        {{ type.name }}
      {%- endif %}

      {%- if type.templates.length -%}
        &lt;
          {%- for t in type.templates -%}
            {{ renderSingleType(t) | trim }}
          {%- endfor -%}
        &gt;
      {% endif %}

    {% elif type.key === 'sequence' %}
      {# An array of something else. #}
      {{ renderSingleType(type.itemType) | trim }}[]

    {% elif type.key === 'choices' %}
      {# An number of choices. #}
      {%- for t in type.choices -%}
        {{ renderSingleType(t) | trim }}{%- if not loop.last %} | {% endif -%}
      {%- endfor -%}

    {% else %}
     {# This is a fallback display but won't render a sensible type that looks like TS. #}
     {{ type.key }}
    {% endif %}

  {% endset %}

  {# Note that we avoid whitespace below, and instead set margins in CSS. #}
  {% if outerProp %}
    <span class="code-sections__icon code-sections__icon--{{ iconType }}">{{ stringType | safe | trim }}
      {%- if outerProp.optional -%}
        &nbsp;<span class="code-sections__optional">optional</span>
      {%- endif -%}
    </span>
  {% else %}
    <span>{{ stringType | safe | trim }}</span>
  {% endif %}

{% endmacro %}

{#
  If the passed model.Property is a function, then render its full signature. Does nothing otherwise.
#}
{% macro renderTypeSignature(prop) %}

  {% if prop.type.key === 'function' %}
    {% set type = prop.type %}
    <code class="code-sections__signature">
      {% if type.isReturnsAsync %}
        <div>
          {{ prop.name }}{{ renderFunctionParameters(type.parametersForAsync) }}:
          {{ renderSingleType(type.returnTypeForAsync) }}
        </div>
      {% endif %}
      <div>
        {{ prop.name }}{{ renderFunctionParameters(type.parameters) }}:
        {{ renderSingleType(type.returnType) }}
      </div>
    </code>
  {% endif %}

{% endmacro %}

{#
  Renders the arguments of a method including ()'s. This is passed as model.Property[].
#}
{% macro renderFunctionParameters(parameters) -%}
  (
    {%- for parameter in parameters -%}
      {{ parameter.name }}{% if parameter.optional %}?{% endif %}:
      <span class="code-sections__signature-type">{{ renderSingleType(parameter.type) | trim }}</span>
      {%- if not loop.last %}, {% endif -%}
    {%- endfor -%}
  )
{%- endmacro %}

{#
  Renders a short summary of the passed model.Property[]. Used at the top of a namespace page for
  different sections (types, events, etc).
#}
{% macro renderSummarySection(namespaceName, label, prefix, array) %}

  {% if array.length %}
    <li>
      <div class="code-sections__label">{{ label }}</div>
      <div>
        {% for prop in array %}
          <div><a href="#{{ prefix }}-{{ prop.name }}" class="link weight-medium">{{ prop.name }}</a></div>
          {{ renderTypeSignature(prop) }}
        {% endfor %}
      </div>
    </li>
  {% endif %}

{% endmacro %}

{#
  Renders the whole list of the passed model.Property[].
#}
{% macro renderPrimarySection(namespaceName, id, label, prefix, array) %}

  {% if array.length %}
    <h2 class="type--h3" id="{{ id }}">{{ label }}</h2>
    {% for prop in array %}
      {{ renderTopProperty(prop, true) }}
    {% endfor %}
  {% endif %}

{% endmacro %}

{#
  Renders API availability information based on a sparse Feature. This is used for both top-level
  namespaces as well as specific APIs. This does not render permissions.

  This returns valid HTML, so it should be rendered with `| safe`.
#}
{% macro renderAvailabilityFeature(feature) %}

  {% if feature.supportedInChannel === 'dev' %}
    Dev channel only.
  {% elif feature.supportedInChannel === 'beta' %}
    Beta and Dev channels only.
  {% elif feature.supportedInChannel === 'canary' or feature.supportedInChannel === 'trunk' %}
    In development.
  {% elif feature.unknownVersion %}
    {# This is stable but not yet visible in the version history data. It's probably coming next
      Chrome release. #}
    Unknown version.
  {% elif feature.availableFromVersion %}
    {# This implies stable. We don't specifically announce `supportedInChannel` of stable. #}
    Since Chrome {{ feature.availableFromVersion }}.
  {% endif %}
  {% if feature.maxManifestVersion %}
    Manifest V{{ feature.maxManifestVersion }}
    {% if feature.maxManifestVersion === 2 %}
      {# Nothing is actually before MV2. #}
      only.
    {% else %}
      and below.
    {% endif %}
  {% endif %}
  {% if feature.minManifestVersion %}
    Manifest V{{ feature.minManifestVersion }} and above.
  {% endif %}
  {% if feature.disallowForServiceWorkers %}
    Unavailable in Service Workers.
  {% endif %}
  {% if prop.deprecated !== undefined or feature.deprecatedSinceVersion %}
    <strong>
      Deprecated
      {%- if feature.deprecatedSinceVersion > 0 %}
        since Chrome {{ feature.deprecatedSinceVersion }}
      {%- endif -%}
    </strong>.
    {{ prop.deprecated | mdInline | safe }}
  {% endif %}

{% endmacro %}